# 활성화 할 properties 파일명 (application-[이름].properties 파일 활성화)
spring.profiles.active=h2

# application 설정
server.port=8803
# server.port를 0으로 설정할 경우 '사용가능 한 랜덤'포트를 부여한다. eureka에 등록된 api를 가지고 gateway를 통해서 들어오기때문에 server.port는 어느것으로 부여되어도 상관없다.
# server.port=0
# eureka 에 등록되는 app 이름 (같은 이름으로 등록되어야 하나의 그룹으로 묶임)
spring.application.name=loans

# Encoding UTF-8
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true
server.error.whitelabel.enabled=false
server.error.include-stacktrace=always
spring.devtools.livereload.enabled=true

# jpa 설정
spring.jpa.show-sql=true

# spring.jpa.hibernate.dll-auto : create, create-drop, update, validate, none 옵션을 설정
#   create : JPA가 DB와 상호작용할 때 기존에 있던 스키마(테이블)을 삭제하고 새로 만드는 것 (주의)
#   create-drop : JPA 종료 시점에 기존에 있었던 테이블을 삭제 (주의)
#   update : JPA에 의해 변경된 부분만 반영
#   validate : 엔티티와 테이블이 정상 매핑되어 있는지만 검증
#   none : 초기화 동작 미사용
spring.jpa.hibernate.ddl-auto=update
# jpa 사용시 로그에 쿼리 출력과 관련된 설정
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
# spring.jpa.properties.hibernate.default_schema=rest

# Naming 전략: @Entity 에 테이블명일 지정되지 않은 경우(implicit)와 지정된 경우(physical)에 Database 에서 생성될 테이블,컬럼 명명 전략
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

# ## Swagger 설정
# Swagger UI 활성화 여부
springdoc.swagger-ui.enabled=true
# OpenAPI 문서 생성 기능을 활성화하거나 비활성화
springdoc.api-docs.enabled=true
springdoc.api-docs.version=OPENAPI_3_0
# OpenAPI 문서를 제공하는 기본 경로를 설정
springdoc.api-docs.path=/v3/api-docs
# 정렬 순서: alpha (알파벳순), method (HTTP 메서드순)
springdoc.swagger-ui.operationsSorter=alpha
# 태그의 정렬 기준을 설정: alpha (알파벳순), default (작성된 순서)
springdoc.swagger-ui.tagsSorter=alpha
# Swagger UI의 접근 경로
springdoc.swagger-ui.path=/swagger-ui.html
# 요청의 소요 시간을 Swagger UI에 표시할지 여부를 설정
springdoc.swagger-ui.display-request-duration=true
# 특정 경로만 선택적으로 Swagger UI에 노출하고 싶을 때 사용
springdoc.paths-to-match=/**
# Swagger UI의 테마
# springdoc.swagger-ui.theme=monokai

springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.packagesToScan=com.mobigen.lecture
springdoc.default-consumes-media-type=application/json,application/x-www-form-urlencoded
springdoc.default-produces-media-type=application/json

# logging
spring.main.banner-mode=off 
spring.output.ansi.enabled=always
logging.config=classpath:log4j2.xml
# logging.pattern.console=%clr(%d{yy-MM-dd E HH:mm:ss.SSS}){green} %highlight([%-5level]) %clr(%logger{1.}){faint} %clr(:){red} %clr(%m){cyan}%n
# logging.pattern.conversion.class=ch.qos.logback.classic.pattern.ClassNameOnlyConverter

# spring security 관련 설정
# @EnableWebSecurity(debug = true) 과 같이 쓰여야 함
# logging.level.org.springframework.security.web.FilterChainProxy=DEBUG
# CommonsRequestLoggingFilter 사용
# logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG

# ip와 랜덤문자열을 통해서 id 설정(server.port=0 사용시 동일한 id가 생성되어 random 사용)
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${random.value}
eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
# eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
eureka.client.service-url.defaultZone=http://127.0.0.1:8761/eureka